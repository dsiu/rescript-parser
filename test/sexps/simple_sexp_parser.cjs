// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Char = require("rescript/lib/js/char.js");
var Parser = require("../../src/parser.cjs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function charListToString(chars) {
  return Belt_List.reduce(Belt_List.map(chars, Char.escaped), "", (function (prim0, prim1) {
                return prim0.concat(prim1);
              }));
}

var whitespace = Parser.satisfy(function ($$char) {
      if ($$char > 13 || $$char < 9) {
        return $$char === 32;
      } else {
        return !($$char === 12 || $$char === 11);
      }
    });

var manyWhitespace = Parser.many(whitespace);

var doubleQuote = Parser.$$char(/* '"' */34);

var anyChar = Parser.satisfy(function ($$char) {
      return $$char !== /* '"' */34;
    });

var quotedString = Parser.map(Parser.map(Parser.between(Parser.many(anyChar), doubleQuote, doubleQuote), charListToString), (function (s) {
        return {
                TAG: /* String */1,
                _0: s
              };
      }));

var digit = Parser.satisfy(function ($$char) {
      if ($$char >= /* '0' */48) {
        return /* '9' */57 >= $$char;
      } else {
        return false;
      }
    });

var $$int = Parser.map(Parser.map(Parser.andThen(Parser.map(Parser.map(Parser.optional(Parser.$$char(/* '-' */45)), (function (__x) {
                        return Belt_Option.map(__x, Char.escaped);
                      })), (function (__x) {
                    return Belt_Option.getWithDefault(__x, "");
                  })), Parser.map(Parser.atLeastOne(digit), charListToString)), (function (param) {
            return param[0] + param[1];
          })), (function (i) {
        return {
                TAG: /* Int */0,
                _0: i
              };
      }));

var parser = Parser.makeRecursive(function (p) {
      var sexp = Parser.between(Parser.map(Parser.orElse(Parser.atLeastOne(p), Parser.map(manyWhitespace, (function (param) {
                          return /* [] */0;
                        }))), (function (xs) {
                  return {
                          TAG: /* Exp */2,
                          _0: xs
                        };
                })), Parser.$$char(/* '(' */40), Parser.$$char(/* ')' */41));
      return Parser.between(Parser.choice([
                      quotedString,
                      $$int,
                      sexp
                    ]), manyWhitespace, manyWhitespace);
    });

var P;

exports.P = P;
exports.charListToString = charListToString;
exports.whitespace = whitespace;
exports.manyWhitespace = manyWhitespace;
exports.quotedString = quotedString;
exports.$$int = $$int;
exports.parser = parser;
/* whitespace Not a pure module */
