// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../../src/parser.cjs");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Lang_sexp_parser = require("./lang_sexp_parser.cjs");

function run(param) {
  return Parser.run(Lang_sexp_parser.definition, param);
}

var successes = [
  [
    "Variable assignment literal",
    "(let hello \"world\")",
    {
      TAG: /* DVariable */0,
      _0: "hello",
      _1: {
        TAG: /* LString */2,
        _0: "world"
      }
    }
  ],
  [
    "Variable assignment lambda",
    "(let hello (lam [a b] 12))",
    {
      TAG: /* DVariable */0,
      _0: "hello",
      _1: {
        TAG: /* LLambda */5,
        _0: {
          hd: "a",
          tl: {
            hd: "b",
            tl: /* [] */0
          }
        },
        _1: {
          TAG: /* LNumber */1,
          _0: "12"
        }
      }
    }
  ],
  [
    "Function definition",
    "(fun hello [a b] 12)",
    {
      TAG: /* DFunction */1,
      _0: "hello",
      _1: {
        hd: "a",
        tl: {
          hd: "b",
          tl: /* [] */0
        }
      },
      _2: {
        TAG: /* LNumber */1,
        _0: "12"
      }
    }
  ],
  [
    "Export string",
    "(export hello \"world\")",
    {
      TAG: /* DExport */3,
      _0: "hello",
      _1: {
        TAG: /* LString */2,
        _0: "world"
      }
    }
  ],
  [
    "Export identifier",
    "(export hello world)",
    {
      TAG: /* DExport */3,
      _0: "hello",
      _1: {
        TAG: /* LIdentifier */0,
        _0: "world"
      }
    }
  ],
  [
    "Simple module",
    "\n  (module name {\n    (let world \"hello\")\n\n    (export hello world)\n  })\n  ",
    {
      TAG: /* DModule */2,
      _0: /* Module */{
        _0: "name",
        _1: {
          hd: {
            TAG: /* DVariable */0,
            _0: "world",
            _1: {
              TAG: /* LString */2,
              _0: "hello"
            }
          },
          tl: /* [] */0
        },
        _2: {
          hd: [
            "hello",
            {
              TAG: /* LIdentifier */0,
              _0: "world"
            }
          ],
          tl: /* [] */0
        }
      }
    }
  ],
  [
    "Empty module",
    "(module foo {})",
    {
      TAG: /* DModule */2,
      _0: /* Module */{
        _0: "foo",
        _1: /* [] */0,
        _2: /* [] */0
      }
    }
  ]
];

Belt_Array.forEach(successes, (function (param) {
        var expected = param[2];
        var input = param[1];
        return Ava.test("[Sexp lang] Defintion \"" + param[0] + "\" success", (function (t) {
                      var err = Parser.run(Lang_sexp_parser.definition, input);
                      if (err.TAG !== /* Ok */0) {
                        return Ava.fail(t, "Shouldn't fail with \"" + err._0 + "\"", undefined);
                      }
                      var match = err._0;
                      var rest = match[1];
                      if (rest === "" && Caml_obj.caml_equal(match[0], expected)) {
                        return Ava.pass(t, "", undefined);
                      }
                      return Ava.fail(t, "Shouldn't succeed with \"" + rest + "\" remaining", undefined);
                    }));
      }));

var P;

var Sexp;

exports.P = P;
exports.Sexp = Sexp;
exports.run = run;
exports.successes = successes;
/*  Not a pure module */
