// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../../src/parser.cjs");
var Lang_sexp_parser = require("./lang_sexp_parser.cjs");

var file = Fs.readFileSync("test/sexps/inputs/valid/file.clj", "utf8");

function run(param) {
  return Parser.run(Lang_sexp_parser.parser, param);
}

Ava.test("[Sexp lang] Module", (function (t) {
        var input = "(module file {" + file + "})";
        var err = Parser.run(Lang_sexp_parser.parser, input);
        if (err.TAG !== /* Ok */0) {
          return Ava.fail(t, "Shouldn't fail with \"" + err._0 + "\"", undefined);
        }
        var match = err._0;
        var match$1 = match[0];
        if (match$1._0 === "file") {
          var match$2 = match$1._1;
          if (match$2) {
            var match$3 = match$2.hd;
            if (match$3.TAG === /* DVariable */0 && match$3._0 === "hello") {
              var match$4 = match$3._1;
              if (typeof match$4 !== "number" && match$4.TAG === /* LString */2 && match$4._0 === "world" && !match$2.tl) {
                var match$5 = match$1._2;
                if (match$5) {
                  var match$6 = match$5.hd;
                  if (match$6[0] === "hello") {
                    var match$7 = match$6[1];
                    if (typeof match$7 !== "number" && match$7.TAG === /* LIdentifier */0 && match$7._0 === "hello" && !match$5.tl && match[1] === "") {
                      return Ava.pass(t, undefined, undefined);
                    }
                    
                  }
                  
                }
                
              }
              
            }
            
          }
          
        }
        return Ava.fail(t, "Shouldn't succeed with \"" + match[1] + "\" remaining", undefined);
      }));

var P;

var Sexp;

exports.P = P;
exports.Sexp = Sexp;
exports.file = file;
exports.run = run;
/* file Not a pure module */
