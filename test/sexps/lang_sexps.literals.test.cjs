// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../../src/parser.cjs");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Lang_sexp_parser = require("./lang_sexp_parser.cjs");

function run(param) {
  return Parser.run(Lang_sexp_parser.literal, param);
}

var successes = [
  [
    "true",
    "true",
    /* LTrue */0
  ],
  [
    "true w/ whitespace",
    "    true  ",
    /* LTrue */0
  ],
  [
    "false",
    "false",
    /* LFalse */1
  ],
  [
    "false w/ whitespace",
    "    false  ",
    /* LFalse */1
  ],
  [
    "simple number",
    "10",
    {
      TAG: /* LNumber */1,
      _0: "10"
    }
  ],
  [
    "simple number w/ whitespace",
    "    10 ",
    {
      TAG: /* LNumber */1,
      _0: "10"
    }
  ],
  [
    "simple++ number",
    "0019652200",
    {
      TAG: /* LNumber */1,
      _0: "0019652200"
    }
  ],
  [
    "simple++ number w/ whitespace",
    "    0019652200 ",
    {
      TAG: /* LNumber */1,
      _0: "0019652200"
    }
  ],
  [
    "simple identifier",
    "hello",
    {
      TAG: /* LIdentifier */0,
      _0: "hello"
    }
  ],
  [
    "simple identifier w/ whitespace",
    "\n  \n  hello\n  ",
    {
      TAG: /* LIdentifier */0,
      _0: "hello"
    }
  ],
  [
    "simple array",
    "[1]",
    {
      TAG: /* LArray */3,
      _0: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "simple array w/ whitespace",
    " [    1\n  ]  ",
    {
      TAG: /* LArray */3,
      _0: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "simple array++",
    "[1 \"2\" [false]]",
    {
      TAG: /* LArray */3,
      _0: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: {
          hd: {
            TAG: /* LString */2,
            _0: "2"
          },
          tl: {
            hd: {
              TAG: /* LArray */3,
              _0: {
                hd: /* LFalse */1,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }
      }
    }
  ],
  [
    "simple array++ w/ whitespace",
    "   [     1\n    \"2\" [\n            false]]",
    {
      TAG: /* LArray */3,
      _0: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: {
          hd: {
            TAG: /* LString */2,
            _0: "2"
          },
          tl: {
            hd: {
              TAG: /* LArray */3,
              _0: {
                hd: /* LFalse */1,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }
      }
    }
  ],
  [
    "simple record",
    "(:foo 1)",
    {
      TAG: /* LRecord */4,
      _0: {
        hd: [
          "foo",
          {
            TAG: /* LNumber */1,
            _0: "1"
          }
        ],
        tl: /* [] */0
      }
    }
  ],
  [
    "simple record with spaces",
    "     ( :foo\n  \n  \n    1 )\n  ",
    {
      TAG: /* LRecord */4,
      _0: {
        hd: [
          "foo",
          {
            TAG: /* LNumber */1,
            _0: "1"
          }
        ],
        tl: /* [] */0
      }
    }
  ],
  [
    "simple record++",
    "(:foo 1 :bar \"baz\" :quux false)",
    {
      TAG: /* LRecord */4,
      _0: {
        hd: [
          "foo",
          {
            TAG: /* LNumber */1,
            _0: "1"
          }
        ],
        tl: {
          hd: [
            "bar",
            {
              TAG: /* LString */2,
              _0: "baz"
            }
          ],
          tl: {
            hd: [
              "quux",
              /* LFalse */1
            ],
            tl: /* [] */0
          }
        }
      }
    }
  ],
  [
    "simple record++ w/ whitespace",
    "\n    (\n      :foo  1 :bar\n      \n      \"baz\"\n:quux          false ) ",
    {
      TAG: /* LRecord */4,
      _0: {
        hd: [
          "foo",
          {
            TAG: /* LNumber */1,
            _0: "1"
          }
        ],
        tl: {
          hd: [
            "bar",
            {
              TAG: /* LString */2,
              _0: "baz"
            }
          ],
          tl: {
            hd: [
              "quux",
              /* LFalse */1
            ],
            tl: /* [] */0
          }
        }
      }
    }
  ],
  [
    "simple lambda (no args)",
    "(lam [] 1)",
    {
      TAG: /* LLambda */5,
      _0: /* [] */0,
      _1: {
        TAG: /* LNumber */1,
        _0: "1"
      }
    }
  ],
  [
    "simple lambda (one arg)",
    "(lam [a] 1)",
    {
      TAG: /* LLambda */5,
      _0: {
        hd: "a",
        tl: /* [] */0
      },
      _1: {
        TAG: /* LNumber */1,
        _0: "1"
      }
    }
  ],
  [
    "simple lambda (multiple args)",
    "(lam [a b c] 1)",
    {
      TAG: /* LLambda */5,
      _0: {
        hd: "a",
        tl: {
          hd: "b",
          tl: {
            hd: "c",
            tl: /* [] */0
          }
        }
      },
      _1: {
        TAG: /* LNumber */1,
        _0: "1"
      }
    }
  ],
  [
    "simple lambda++ (no args)",
    "(lam [] a)",
    {
      TAG: /* LLambda */5,
      _0: /* [] */0,
      _1: {
        TAG: /* LIdentifier */0,
        _0: "a"
      }
    }
  ],
  [
    "simple lambda++ (one arg)",
    "(lam [a] a)",
    {
      TAG: /* LLambda */5,
      _0: {
        hd: "a",
        tl: /* [] */0
      },
      _1: {
        TAG: /* LIdentifier */0,
        _0: "a"
      }
    }
  ],
  [
    "simple lambda++ (multiple args)",
    "(lam [a b c] [a b c])",
    {
      TAG: /* LLambda */5,
      _0: {
        hd: "a",
        tl: {
          hd: "b",
          tl: {
            hd: "c",
            tl: /* [] */0
          }
        }
      },
      _1: {
        TAG: /* LArray */3,
        _0: {
          hd: {
            TAG: /* LIdentifier */0,
            _0: "a"
          },
          tl: {
            hd: {
              TAG: /* LIdentifier */0,
              _0: "b"
            },
            tl: {
              hd: {
                TAG: /* LIdentifier */0,
                _0: "c"
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  ],
  [
    "lambda with lambda body",
    "(lam [a] (lam [b] 12))",
    {
      TAG: /* LLambda */5,
      _0: {
        hd: "a",
        tl: /* [] */0
      },
      _1: {
        TAG: /* LLambda */5,
        _0: {
          hd: "b",
          tl: /* [] */0
        },
        _1: {
          TAG: /* LNumber */1,
          _0: "12"
        }
      }
    }
  ],
  [
    "simple named function execution empty",
    "(add 1)",
    {
      TAG: /* LExecution */6,
      _0: {
        TAG: /* FNamed */0,
        _0: "add"
      },
      _1: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "simple named function execution one arg",
    "(add)",
    {
      TAG: /* LExecution */6,
      _0: {
        TAG: /* FNamed */0,
        _0: "add"
      },
      _1: /* [] */0
    }
  ],
  [
    "simple named function execution one arg w/whitespace",
    "  (   add\n   1   )  ",
    {
      TAG: /* LExecution */6,
      _0: {
        TAG: /* FNamed */0,
        _0: "add"
      },
      _1: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "simple anonymous function execution",
    "((lam [x] x) 1)",
    {
      TAG: /* LExecution */6,
      _0: {
        TAG: /* FAnon */1,
        _0: {
          hd: "x",
          tl: /* [] */0
        },
        _1: {
          TAG: /* LIdentifier */0,
          _0: "x"
        }
      },
      _1: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "nested anonymous function execution",
    "((lam [a] ((lam [b] \"hello\") a)) 1)",
    {
      TAG: /* LExecution */6,
      _0: {
        TAG: /* FAnon */1,
        _0: {
          hd: "a",
          tl: /* [] */0
        },
        _1: {
          TAG: /* LExecution */6,
          _0: {
            TAG: /* FAnon */1,
            _0: {
              hd: "b",
              tl: /* [] */0
            },
            _1: {
              TAG: /* LString */2,
              _0: "hello"
            }
          },
          _1: {
            hd: {
              TAG: /* LIdentifier */0,
              _0: "a"
            },
            tl: /* [] */0
          }
        }
      },
      _1: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "nested anonymous function execution w/ whitespace",
    " ( (   lam\n    [a]\n    ( (       lam[b]     \"hello\")a)\n    )1)",
    {
      TAG: /* LExecution */6,
      _0: {
        TAG: /* FAnon */1,
        _0: {
          hd: "a",
          tl: /* [] */0
        },
        _1: {
          TAG: /* LExecution */6,
          _0: {
            TAG: /* FAnon */1,
            _0: {
              hd: "b",
              tl: /* [] */0
            },
            _1: {
              TAG: /* LString */2,
              _0: "hello"
            }
          },
          _1: {
            hd: {
              TAG: /* LIdentifier */0,
              _0: "a"
            },
            tl: /* [] */0
          }
        }
      },
      _1: {
        hd: {
          TAG: /* LNumber */1,
          _0: "1"
        },
        tl: /* [] */0
      }
    }
  ],
  [
    "simple block",
    "{ \"hello\" }",
    {
      TAG: /* LBlock */7,
      _0: /* [] */0,
      _1: {
        TAG: /* LString */2,
        _0: "hello"
      }
    }
  ],
  [
    "simple block string w/ whitespace",
    "{\n      \"hello\"\n    }",
    {
      TAG: /* LBlock */7,
      _0: /* [] */0,
      _1: {
        TAG: /* LString */2,
        _0: "hello"
      }
    }
  ],
  [
    "simple block execution w/ whitespace",
    "{\n      (log \"hello\")\n    }",
    {
      TAG: /* LBlock */7,
      _0: /* [] */0,
      _1: {
        TAG: /* LExecution */6,
        _0: {
          TAG: /* FNamed */0,
          _0: "log"
        },
        _1: {
          hd: {
            TAG: /* LString */2,
            _0: "hello"
          },
          tl: /* [] */0
        }
      }
    }
  ],
  [
    "simple block no return",
    "{\n      (let hello 1)\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "hello",
          _1: {
            TAG: /* LNumber */1,
            _0: "1"
          }
        },
        tl: /* [] */0
      },
      _1: undefined
    }
  ],
  [
    "simple block execution no return",
    "{\n      (let hello (log 1))\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "hello",
          _1: {
            TAG: /* LExecution */6,
            _0: {
              TAG: /* FNamed */0,
              _0: "log"
            },
            _1: {
              hd: {
                TAG: /* LNumber */1,
                _0: "1"
              },
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      },
      _1: undefined
    }
  ],
  [
    "multiline block execution no return",
    "{\n      (let hello \"hello\")\n      (let world (concat hello \"world\"))\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "hello",
          _1: {
            TAG: /* LString */2,
            _0: "hello"
          }
        },
        tl: {
          hd: {
            TAG: /* BVariable */0,
            _0: "world",
            _1: {
              TAG: /* LExecution */6,
              _0: {
                TAG: /* FNamed */0,
                _0: "concat"
              },
              _1: {
                hd: {
                  TAG: /* LIdentifier */0,
                  _0: "hello"
                },
                tl: {
                  hd: {
                    TAG: /* LString */2,
                    _0: "world"
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          tl: /* [] */0
        }
      },
      _1: undefined
    }
  ],
  [
    "multiline block execution w/ return",
    "{\n      (let hello \"hello\")\n      (let world (concat hello \"world\"))\n\n      world\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "hello",
          _1: {
            TAG: /* LString */2,
            _0: "hello"
          }
        },
        tl: {
          hd: {
            TAG: /* BVariable */0,
            _0: "world",
            _1: {
              TAG: /* LExecution */6,
              _0: {
                TAG: /* FNamed */0,
                _0: "concat"
              },
              _1: {
                hd: {
                  TAG: /* LIdentifier */0,
                  _0: "hello"
                },
                tl: {
                  hd: {
                    TAG: /* LString */2,
                    _0: "world"
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          tl: /* [] */0
        }
      },
      _1: {
        TAG: /* LIdentifier */0,
        _0: "world"
      }
    }
  ],
  [
    "simple block w/ return",
    "{\n      (let hello 1)\n\n      hello\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "hello",
          _1: {
            TAG: /* LNumber */1,
            _0: "1"
          }
        },
        tl: /* [] */0
      },
      _1: {
        TAG: /* LIdentifier */0,
        _0: "hello"
      }
    }
  ],
  [
    "multiline block w/o return",
    "{\n      (let hello 1)\n      (let world 2)\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "hello",
          _1: {
            TAG: /* LNumber */1,
            _0: "1"
          }
        },
        tl: {
          hd: {
            TAG: /* BVariable */0,
            _0: "world",
            _1: {
              TAG: /* LNumber */1,
              _0: "2"
            }
          },
          tl: /* [] */0
        }
      },
      _1: undefined
    }
  ],
  [
    "multiline block w/ whitespace",
    "{\n      (let world \"world\")\n      (let bar (concat \"hello\" world))\n\n      bar\n    }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "world",
          _1: {
            TAG: /* LString */2,
            _0: "world"
          }
        },
        tl: {
          hd: {
            TAG: /* BVariable */0,
            _0: "bar",
            _1: {
              TAG: /* LExecution */6,
              _0: {
                TAG: /* FNamed */0,
                _0: "concat"
              },
              _1: {
                hd: {
                  TAG: /* LString */2,
                  _0: "hello"
                },
                tl: {
                  hd: {
                    TAG: /* LIdentifier */0,
                    _0: "world"
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          tl: /* [] */0
        }
      },
      _1: {
        TAG: /* LIdentifier */0,
        _0: "bar"
      }
    }
  ],
  [
    "multiline return lambda",
    "\n  {\n    (let x 1)\n    \n    (lam [a] (add a x))\n  }\n  ",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BVariable */0,
          _0: "x",
          _1: {
            TAG: /* LNumber */1,
            _0: "1"
          }
        },
        tl: /* [] */0
      },
      _1: {
        TAG: /* LLambda */5,
        _0: {
          hd: "a",
          tl: /* [] */0
        },
        _1: {
          TAG: /* LExecution */6,
          _0: {
            TAG: /* FNamed */0,
            _0: "add"
          },
          _1: {
            hd: {
              TAG: /* LIdentifier */0,
              _0: "a"
            },
            tl: {
              hd: {
                TAG: /* LIdentifier */0,
                _0: "x"
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  ],
  [
    "simple function block w/ return",
    "\n  {\n    (fun hello [name] \"hello\")\n\n    hello\n  }",
    {
      TAG: /* LBlock */7,
      _0: {
        hd: {
          TAG: /* BFunction */1,
          _0: "hello",
          _1: {
            hd: "name",
            tl: /* [] */0
          },
          _2: {
            TAG: /* LString */2,
            _0: "hello"
          }
        },
        tl: /* [] */0
      },
      _1: {
        TAG: /* LIdentifier */0,
        _0: "hello"
      }
    }
  ],
  [
    "simple nested block",
    "{ { 1 } }",
    {
      TAG: /* LBlock */7,
      _0: /* [] */0,
      _1: {
        TAG: /* LBlock */7,
        _0: /* [] */0,
        _1: {
          TAG: /* LNumber */1,
          _0: "1"
        }
      }
    }
  ]
];

Belt_Array.forEach(successes, (function (param) {
        var expected = param[2];
        var input = param[1];
        return Ava.test("[Sexp lang] \"" + param[0] + "\" success", (function (t) {
                      var err = Parser.run(Lang_sexp_parser.literal, input);
                      if (err.TAG !== /* Ok */0) {
                        return Ava.fail(t, "Shouldn't fail with \"" + err._0 + "\"", undefined);
                      }
                      var match = err._0;
                      var rest = match[1];
                      var output = match[0];
                      if (rest === "" && Caml_obj.caml_equal(output, expected)) {
                        return Ava.pass(t, "", undefined);
                      }
                      return Ava.fail(t, "Shouldn't succeed with " + Lang_sexp_parser.literalToString(output) + " and \"" + rest + "\" remaining", undefined);
                    }));
      }));

var P;

var Sexp;

exports.P = P;
exports.Sexp = Sexp;
exports.run = run;
exports.successes = successes;
/*  Not a pure module */
