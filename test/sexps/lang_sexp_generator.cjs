// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function listLast(_l) {
  while(true) {
    var l = _l;
    if (!l) {
      return ;
    }
    var rest = l.tl;
    if (!rest) {
      return Caml_option.some(l.hd);
    }
    _l = rest;
    continue ;
  };
}

function stringifyDef(def, indent) {
  var ws = "\t".repeat(indent);
  var newline = "\n" + ws + "";
  switch (def.TAG | 0) {
    case /* DVariable */0 :
        return "var " + def._0 + " = " + stringifyLiteral(def._1, indent);
    case /* DFunction */1 :
        var args = Belt_Array.joinWith(Belt_List.toArray(def._1), ",", (function (x) {
                return x;
              }));
        return "function " + def._0 + "(" + args + ") {" + newline + "\t".repeat(indent + 1 | 0) + "return " + stringifyLiteral(def._2, indent + 1 | 0) + ";" + newline + "}";
    case /* DModule */2 :
        var match = def._0;
        var defs = Belt_Array.joinWith(Belt_List.toArray(Belt_List.map(match._1, (function (def) {
                        return stringifyDef(def, indent + 1 | 0);
                      }))), "", (function (x) {
                return newline + x;
              }));
        var $$exports = Belt_Array.joinWith(Belt_List.toArray(Belt_List.map(match._2, (function (param) {
                        return param[0] + ": " + stringifyLiteral(param[1], indent);
                      }))), "", (function (x) {
                return x + ",";
              }));
        return newline + ("var " + match._0 + " = (() => {") + defs + newline + "return {" + newline + ws + $$exports + newline + newline + "}" + newline + "})();";
    case /* DExport */3 :
        return "";
    
  }
}

function stringifyLiteral(literal, indent) {
  var ws = "\t".repeat(indent);
  var newline = "\n" + ws;
  if (typeof literal === "number") {
    if (literal === /* LTrue */0) {
      return "true";
    } else {
      return "false";
    }
  }
  switch (literal.TAG | 0) {
    case /* LIdentifier */0 :
    case /* LNumber */1 :
        return literal._0;
    case /* LString */2 :
        return "\"" + literal._0 + "\"";
    case /* LArray */3 :
        var body = Belt_Array.joinWith(Belt_List.toArray(Belt_List.map(literal._0, (function (x) {
                        return stringifyLiteral(x, indent);
                      }))), ", ", (function (x) {
                return x;
              }));
        return "[" + body + "]";
    case /* LRecord */4 :
        return ws + "{" + newline + "}";
    case /* LLambda */5 :
        return "function() {\n      return\n    }";
    case /* LExecution */6 :
        return "";
    case /* LBlock */7 :
        return "";
    
  }
}

function generate(t) {
  var file = Belt_Array.joinWith(Belt_List.toArray(Belt_List.map(t._1, (function (def) {
                  return stringifyDef(def, 0);
                }))), "\n\n", (function (x) {
          return x;
        }));
  var $$exports = Belt_Array.joinWith(Belt_List.toArray(t._2), ",\n", (function (param) {
          return "\t" + param[0] + ": " + stringifyLiteral(param[1], 0);
        }));
  var $$exports$1 = "module.exports = {\n" + $$exports + "\n}";
  return file + "\n\n" + $$exports$1;
}

exports.listLast = listLast;
exports.stringifyDef = stringifyDef;
exports.stringifyLiteral = stringifyLiteral;
exports.generate = generate;
/* No side effect */
