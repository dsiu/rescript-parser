// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Json = require("./json/parser/json.cjs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Res_parser = require("../src/res_parser.cjs");

Ava.test("Separated by simple", (function (t) {
        var parser = Res_parser.map(Res_parser.map(Res_parser.separatedBy1(Res_parser.$$char(/* 'a' */97), Res_parser.$$char(/* ',' */44)), (function (__x) {
                    return Belt_List.map(__x, Json.charToString);
                  })), Json.concatStringList);
        var match = Res_parser.run(parser, "a,a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          var exit = 0;
          if (match$1[0] === "aa" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not pass with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Res_parser.run(parser, "a,,a");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          var exit$1 = 0;
          if (match$3[0] === "a" && match$3[1] === ",,a") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$3[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Res_parser.run(parser, "a,a,a,a");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit$2 = 0;
          if (match$5[0] === "aaaa" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$6 = Res_parser.run(parser, "a");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          var exit$3 = 0;
          if (match$7[0] === "a" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$7[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$8 = Res_parser.run(parser, "a,b,c");
        if (match$8.TAG === /* Ok */0) {
          var match$9 = match$8._0;
          var exit$4 = 0;
          if (match$9[0] === "a" && match$9[1] === ",b,c") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$4 = 1;
          }
          if (exit$4 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$9[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var manyWhitespace = Res_parser.many(Res_parser.$$char(/* ' ' */32));
        var commaWithWhitespace = Res_parser.between(Res_parser.$$char(/* ',' */44), manyWhitespace, manyWhitespace);
        var parser$1 = Res_parser.separatedBy1(Res_parser.$$char(/* 'a' */97), commaWithWhitespace);
        var err = Res_parser.run(parser$1, "a, a,a,   a    ,a");
        if (err.TAG === /* Ok */0) {
          var match$10 = err._0;
          var match$11 = match$10[0];
          var exit$5 = 0;
          if (match$11 && match$11.hd === 97) {
            var match$12 = match$11.tl;
            if (match$12 && match$12.hd === 97) {
              var match$13 = match$12.tl;
              if (match$13 && match$13.hd === 97) {
                var match$14 = match$13.tl;
                if (match$14 && match$14.hd === 97) {
                  var match$15 = match$14.tl;
                  if (match$15 && !(match$15.hd !== 97 || match$15.tl || match$10[1] !== "")) {
                    Ava.pass(t, undefined, undefined);
                  } else {
                    exit$5 = 1;
                  }
                } else {
                  exit$5 = 1;
                }
              } else {
                exit$5 = 1;
              }
            } else {
              exit$5 = 1;
            }
          } else {
            exit$5 = 1;
          }
          if (exit$5 === 1) {
            Ava.fail(t, "Shouldn't succeed with \"" + match$10[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Shouldn't fail with \"" + err._0 + "\"", undefined);
        }
        var err$1 = Res_parser.run(parser$1, "a");
        if (err$1.TAG === /* Ok */0) {
          var match$16 = err$1._0;
          var match$17 = match$16[0];
          var exit$6 = 0;
          if (match$17 && !(match$17.hd !== 97 || match$17.tl || match$16[1] !== "")) {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$6 = 1;
          }
          if (exit$6 === 1) {
            Ava.fail(t, "Shouldn't succeed with \"" + match$16[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Shouldn't fail with \"" + err$1._0 + "\"", undefined);
        }
        var err$2 = Res_parser.run(parser$1, "");
        if (err$2.TAG === /* Ok */0) {
          return Ava.fail(t, "Shouldn't succeed with \"" + err$2._0[1] + "\" remaining", undefined);
        } else {
          return Ava.pass(t, "Shouldn't fail with \"" + err$2._0 + "\"", undefined);
        }
      }));

Ava.test("Separated by many simple", (function (t) {
        var parser = Res_parser.map(Res_parser.map(Res_parser.separatedBy(Res_parser.$$char(/* 'a' */97), Res_parser.$$char(/* ',' */44)), (function (__x) {
                    return Belt_List.map(__x, Json.charToString);
                  })), Json.concatStringList);
        var match = Res_parser.run(parser, "a,a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          var exit = 0;
          if (match$1[0] === "aa" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not pass with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Res_parser.run(parser, "a,a,a,a");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          var exit$1 = 0;
          if (match$3[0] === "aaaa" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$3[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Res_parser.run(parser, "a");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit$2 = 0;
          if (match$5[0] === "a" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$6 = Res_parser.run(parser, "a,b,c");
        if (match$6.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$7 = match$6._0;
        if (match$7[0] === "a" && match$7[1] === ",b,c") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Should not pass with \"" + match$7[1] + "\" remaining", undefined);
      }));

Ava.test("Separated by at least one", (function (t) {
        var atLeastOneComma = Res_parser.atLeastOne(Res_parser.$$char(/* ',' */44));
        var parser = Res_parser.map(Res_parser.map(Res_parser.separatedBy(Res_parser.$$char(/* 'a' */97), atLeastOneComma), (function (__x) {
                    return Belt_List.map(__x, Json.charToString);
                  })), Json.concatStringList);
        var match = Res_parser.run(parser, "a,,,a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          var exit = 0;
          if (match$1[0] === "aa" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not pass with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Res_parser.run(parser, "a,,,,,a,,a,a,,,a");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          var exit$1 = 0;
          if (match$3[0] === "aaaaa" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$3[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var commaSeparatedByWhitespace = Res_parser.andThen(Res_parser.andThen(Json.manyWhitespace, Res_parser.$$char(/* ',' */44)), Json.manyWhitespace);
        var parser$1 = Res_parser.map(Res_parser.map(Res_parser.separatedBy(Res_parser.$$char(/* 'a' */97), commaSeparatedByWhitespace), (function (__x) {
                    return Belt_List.map(__x, Json.charToString);
                  })), Json.concatStringList);
        var match$4 = Res_parser.run(parser$1, "a, a");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit$2 = 0;
          if (match$5[0] === "aa" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$6 = Res_parser.run(parser$1, "a      ,a");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          var exit$3 = 0;
          if (match$7[0] === "aa" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$7[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$8 = Res_parser.run(parser$1, "a      ,a,a,a      ,a");
        if (match$8.TAG !== /* Ok */0) {
          return Ava.fail(t, "Should not fail", undefined);
        }
        var match$9 = match$8._0;
        if (match$9[0] === "aaaaa" && match$9[1] === "") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Should not pass with \"" + match$9[1] + "\" remaining", undefined);
      }));

var P;

exports.P = P;
/*  Not a pure module */
