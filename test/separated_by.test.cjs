// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../src/parser.cjs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Json_helpers = require("./json/json_helpers.cjs");

Ava.test("Separated by simple", (function (t) {
        var parser = Parser.map(Parser.map(Parser.separatedBy1(Parser.$$char(/* 'a' */97), Parser.$$char(/* ',' */44)), (function (__x) {
                    return Belt_List.map(__x, Json_helpers.charToString);
                  })), Json_helpers.concatStringList);
        var match = Parser.run(parser, "a,a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          var exit = 0;
          if (match$1[0] === "aa" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not pass with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(parser, "a,,a");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          var exit$1 = 0;
          if (match$3[0] === "a" && match$3[1] === ",,a") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$3[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(parser, "a,a,a,a");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit$2 = 0;
          if (match$5[0] === "aaaa" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$6 = Parser.run(parser, "a");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          var exit$3 = 0;
          if (match$7[0] === "a" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$7[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$8 = Parser.run(parser, "a,b,c");
        if (match$8.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$9 = match$8._0;
        if (match$9[0] === "a" && match$9[1] === ",b,c") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Should not pass with \"" + match$9[1] + "\" remaining", undefined);
      }));

Ava.test("Separated by many simple", (function (t) {
        var parser = Parser.map(Parser.map(Parser.separatedBy(Parser.$$char(/* 'a' */97), Parser.$$char(/* ',' */44)), (function (__x) {
                    return Belt_List.map(__x, Json_helpers.charToString);
                  })), Json_helpers.concatStringList);
        var match = Parser.run(parser, "a,a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          var exit = 0;
          if (match$1[0] === "aa" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not pass with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(parser, "a,a,a,a");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          var exit$1 = 0;
          if (match$3[0] === "aaaa" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$3[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(parser, "a");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit$2 = 0;
          if (match$5[0] === "a" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$6 = Parser.run(parser, "a,b,c");
        if (match$6.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$7 = match$6._0;
        if (match$7[0] === "a" && match$7[1] === ",b,c") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Should not pass with \"" + match$7[1] + "\" remaining", undefined);
      }));

Ava.test("Separated by at least one", (function (t) {
        var atLeastOneComma = Parser.atLeastOne(Parser.$$char(/* ',' */44));
        var parser = Parser.map(Parser.map(Parser.separatedBy(Parser.$$char(/* 'a' */97), atLeastOneComma), (function (__x) {
                    return Belt_List.map(__x, Json_helpers.charToString);
                  })), Json_helpers.concatStringList);
        var match = Parser.run(parser, "a,,,a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          var exit = 0;
          if (match$1[0] === "aa" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not pass with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(parser, "a,,,,,a,,a,a,,,a");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          var exit$1 = 0;
          if (match$3[0] === "aaaaa" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$3[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var commaSeparatedByWhitespace = Parser.andThen(Parser.andThen(Json_helpers.manyWhitespace, Parser.$$char(/* ',' */44)), Json_helpers.manyWhitespace);
        var parser$1 = Parser.map(Parser.map(Parser.separatedBy(Parser.$$char(/* 'a' */97), commaSeparatedByWhitespace), (function (__x) {
                    return Belt_List.map(__x, Json_helpers.charToString);
                  })), Json_helpers.concatStringList);
        var match$4 = Parser.run(parser$1, "a, a");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit$2 = 0;
          if (match$5[0] === "aa" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$6 = Parser.run(parser$1, "a      ,a");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          var exit$3 = 0;
          if (match$7[0] === "aa" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            Ava.fail(t, "Should not pass with \"" + match$7[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$8 = Parser.run(parser$1, "a      ,a,a,a      ,a");
        if (match$8.TAG !== /* Ok */0) {
          return Ava.fail(t, "Should not fail", undefined);
        }
        var match$9 = match$8._0;
        if (match$9[0] === "aaaaa" && match$9[1] === "") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Should not pass with \"" + match$9[1] + "\" remaining", undefined);
      }));

var Helpers;

var P;

exports.Helpers = Helpers;
exports.P = P;
/*  Not a pure module */
