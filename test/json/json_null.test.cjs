// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../../src/parser.cjs");
var Json_parser = require("./json_parser.cjs");

Ava.test("[JSON] valid null", (function (t) {
        var result = Parser.run(Json_parser.$$null, "null");
        if (result.TAG !== /* Ok */0) {
          return Ava.fail(t, "Parsing \"null\" returns an error of message: \"" + result._0 + "\"", undefined);
        }
        var match = result._0;
        var ast = match[0];
        if (ast !== 0) {
          return Ava.fail(t, "Parsing \"null\" returns an incorrect AST of " + Json_parser.toString(ast), undefined);
        }
        var remaining = match[1];
        if (remaining === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, "Parsing \"null\" should return an empty string but got \"" + remaining + "\"", undefined);
        }
      }));

Ava.test("[JSON] invalid null", (function (t) {
        var result = Parser.run(Json_parser.$$null, "tnull");
        if (result.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, "Parsing \"null\" should return an error message", undefined);
        }
        var result$1 = Parser.run(Json_parser.$$null, "  ");
        if (result$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, "Parsing \"null\" should return an error message", undefined);
        }
        var result$2 = Parser.run(Json_parser.$$null, "no");
        if (result$2.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, "Parsing \"null\" should return an error message", undefined);
        }
      }));

var P;

var $$null = Json_parser.$$null;

exports.P = P;
exports.$$null = $$null;
/*  Not a pure module */
