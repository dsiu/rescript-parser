// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Json = require("./parser/json.cjs");
var Parser = require("../../src/parser.cjs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function run(param) {
  return Parser.run(Json.parse, param);
}

var validNulls = [
  [
    "1",
    "null"
  ],
  [
    "2",
    "     null"
  ],
  [
    "3",
    "     null           "
  ],
  [
    "4",
    "null           "
  ]
];

Belt_Array.forEach(validNulls, (function (param) {
        var input = param[1];
        return Ava.test("[JSON] Valid \"null\" " + param[0], (function (t) {
                      var error = Parser.run(Json.parse, input);
                      if (error.TAG !== /* Ok */0) {
                        return Ava.fail(t, "Shouldn't fail with: \"" + error._0 + "\"", undefined);
                      }
                      var match = error._0;
                      var ast = match[0];
                      if (ast !== 0) {
                        return Ava.fail(t, "Shouldn't succeed with \"" + Json.toString(ast) + "\"", undefined);
                      }
                      var rest = match[1];
                      if (rest === "") {
                        return Ava.pass(t, undefined, undefined);
                      } else {
                        return Ava.fail(t, "Shouldn't succeed with \"" + rest + "\" remaining", undefined);
                      }
                    }));
      }));

var partiallyValidNulls = [
  [
    "1",
    "nulla",
    "a"
  ],
  [
    "2",
    "     null   ___",
    "___"
  ],
  [
    "3",
    "     null}[]",
    "}[]"
  ],
  [
    "4",
    "null           +",
    "+"
  ]
];

Belt_Array.forEach(partiallyValidNulls, (function (param) {
        var remaining = param[2];
        var input = param[1];
        return Ava.test("[JSON] Partially valid \"null\" " + param[0], (function (t) {
                      var error = Parser.run(Json.parse, input);
                      if (error.TAG !== /* Ok */0) {
                        return Ava.fail(t, "Shouldn't fail with: \"" + error._0 + "\"", undefined);
                      }
                      var match = error._0;
                      var ast = match[0];
                      if (ast === 0 && match[1] === remaining) {
                        return Ava.pass(t, undefined, undefined);
                      }
                      return Ava.fail(t, "Shouldn't succeed with \"" + Json.toString(ast) + "\" and \"" + match[1] + "\" remaining", undefined);
                    }));
      }));

var invalid = [
  [
    "1",
    "."
  ],
  [
    "2",
    "-null"
  ],
  [
    "3",
    "     ]null}[]"
  ],
  [
    "4",
    "tnull"
  ]
];

Belt_Array.forEach(invalid, (function (param) {
        var input = param[1];
        return Ava.test("[JSON] Invalid \"null\" " + param[0], (function (t) {
                      var error = Parser.run(Json.parse, input);
                      if (error.TAG !== /* Ok */0) {
                        return Ava.pass(t, "Should fail with: \"" + error._0 + "\"", undefined);
                      }
                      var match = error._0;
                      return Ava.fail(t, "Shouldn't succeed with \"" + Json.toString(match[0]) + "\" and \"" + match[1] + "\" remaining", undefined);
                    }));
      }));

var P;

exports.P = P;
exports.run = run;
exports.validNulls = validNulls;
exports.partiallyValidNulls = partiallyValidNulls;
exports.invalid = invalid;
/*  Not a pure module */
