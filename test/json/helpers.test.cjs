// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../../src/parser.cjs");
var Belt_Range = require("rescript/lib/js/belt_Range.js");
var Json_helpers = require("./json_helpers.cjs");

function shouldNotPass(param) {
  return "Should not pass with \"" + param[1] + "\" remaining";
}

var shouldNotFail = "Should not fail";

Ava.test("Digit succeeds", (function (t) {
        return Belt_Range.forEach(0, 9, (function (index) {
                      var asString = String(index);
                      var result = Parser.run(Json_helpers.digit, asString);
                      if (result.TAG !== /* Ok */0) {
                        return Ava.fail(t, "Failure to parse digit: " + result._0, undefined);
                      }
                      var match = result._0;
                      var remaining = match[1];
                      if (remaining === "") {
                        return Ava.true_(t, match[0] === asString, undefined, undefined);
                      } else {
                        return Ava.fail(t, "Parsing digit had remaining characters: \"" + remaining + "\"", undefined);
                      }
                    }));
      }));

Ava.test("Digit partially succeeds", (function (t) {
        var result = Parser.run(Json_helpers.digit, "10");
        if (result.TAG === /* Ok */0) {
          var match = result._0;
          if (match[0] === "1" && match[1] === "0") {
            Ava.pass(t, "Should be a digit with a char remaining", undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var result$1 = Parser.run(Json_helpers.digit, "1hello");
        if (result$1.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$1 = result$1._0;
        if (match$1[0] === "1" && match$1[1] === "hello") {
          return Ava.pass(t, "Should be a digit with a char remaining", undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Digit fails", (function (t) {
        var result = Parser.run(Json_helpers.digit, "hello");
        if (result.TAG === /* Ok */0) {
          return Ava.fail(t, "Should fail outright", undefined);
        } else {
          return Ava.pass(t, "Fails to parse, reason: \"" + result._0 + "\"", undefined);
        }
      }));

Ava.test("Digits succeeds", (function (t) {
        var result = Parser.run(Json_helpers.digits, "1");
        if (result.TAG === /* Ok */0) {
          var match = result._0;
          var exit = 0;
          if (match[0] === "1" && match[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Passed with \"" + match[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var result$1 = Parser.run(Json_helpers.digits, "123");
        if (result$1.TAG === /* Ok */0) {
          var match$1 = result$1._0;
          var exit$1 = 0;
          if (match$1[0] === "123" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit$1 = 1;
          }
          if (exit$1 === 1) {
            Ava.fail(t, "Passed with \"" + match$1[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var result$2 = Parser.run(Json_helpers.digits, "123asdf");
        if (result$2.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$2 = result$2._0;
        if (match$2[0] === "123" && match$2[1] === "asdf") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Passed with \"" + match$2[1] + "\" remaining", undefined);
      }));

Ava.test("Digits fails", (function (t) {
        var result = Parser.run(Json_helpers.digits, " 123");
        if (result.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var result$1 = Parser.run(Json_helpers.digits, "not even close");
        if (result$1.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Exponent succeeds", (function (t) {
        var match = Parser.run(Json_helpers.exponent, "e-1234");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "e-1234" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.exponent, "E-1234");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === "E-1234" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.exponent, "e1234");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          if (match$5[0] === "e1234" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$6 = Parser.run(Json_helpers.exponent, "E1234");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          if (match$7[0] === "E1234" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$8 = Parser.run(Json_helpers.exponent, "e0");
        if (match$8.TAG === /* Ok */0) {
          var match$9 = match$8._0;
          if (match$9[0] === "e0" && match$9[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$10 = Parser.run(Json_helpers.exponent, "E0");
        if (match$10.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$11 = match$10._0;
        if (match$11[0] === "E0" && match$11[1] === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Exponent partially succeeds", (function (t) {
        var match = Parser.run(Json_helpers.exponent, "e-1234hello");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "e-1234" && match$1[1] === "hello") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.exponent, "e-1234  1");
        if (match$2.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$3 = match$2._0;
        if (match$3[0] === "e-1234" && match$3[1] === "  1") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Exponent fails", (function (t) {
        var match = Parser.run(Json_helpers.exponent, "  E0");
        if (match.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$1 = Parser.run(Json_helpers.exponent, "e--1");
        if (match$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.exponent, "e-");
        if (match$2.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$3 = Parser.run(Json_helpers.exponent, "ye ");
        if (match$3.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Fraction succeeds", (function (t) {
        var match = Parser.run(Json_helpers.fraction, ".1234");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === ".1234" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.fraction, ".4");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === ".4" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.fraction, ".0000345");
        if (match$4.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$5 = match$4._0;
        if (match$5[0] === ".0000345" && match$5[1] === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Fraction partially succeeds", (function (t) {
        var match = Parser.run(Json_helpers.fraction, ".654hello");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === ".654" && match$1[1] === "hello") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.fraction, ".1  1");
        if (match$2.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$3 = match$2._0;
        if (match$3[0] === ".1" && match$3[1] === "  1") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Fraction fails", (function (t) {
        var match = Parser.run(Json_helpers.fraction, "  .1");
        if (match.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$1 = Parser.run(Json_helpers.fraction, ".e1");
        if (match$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.fraction, ". .1");
        if (match$2.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$3 = Parser.run(Json_helpers.fraction, "..");
        if (match$3.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.fraction, "..11");
        if (match$4.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Sign succeeds", (function (t) {
        var match = Parser.run(Json_helpers.sign, "-");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] !== 45 || match$1[1] !== "") {
            Ava.fail(t, undefined, undefined);
          } else {
            Ava.pass(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.sign, "+");
        if (match$2.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$3 = match$2._0;
        if (match$3[0] !== 43 || match$3[1] !== "") {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Sign partially succeeds", (function (t) {
        var match = Parser.run(Json_helpers.sign, "+1");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] !== 43 || match$1[1] !== "1") {
            Ava.fail(t, undefined, undefined);
          } else {
            Ava.pass(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.sign, "-1  1");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] !== 45 || match$3[1] !== "1  1") {
            Ava.fail(t, undefined, undefined);
          } else {
            Ava.pass(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.sign, "+     sdf1  1");
        if (match$4.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$5 = match$4._0;
        if (match$5[0] !== 43 || match$5[1] !== "     sdf1  1") {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Sign fails", (function (t) {
        var match = Parser.run(Json_helpers.sign, "  +");
        if (match.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$1 = Parser.run(Json_helpers.sign, "  1-");
        if (match$1.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Integer succeeds", (function (t) {
        var match = Parser.run(Json_helpers.integer, "1");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "1" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.integer, "0");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === "0" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.integer, "1234");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var ok = match$5[0];
          var exit = 0;
          if (ok === "1234" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not have \"" + ok + "\" with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$6 = Parser.run(Json_helpers.integer, "-1");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          if (match$7[0] === "-1" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$8 = Parser.run(Json_helpers.integer, "-0");
        if (match$8.TAG === /* Ok */0) {
          var match$9 = match$8._0;
          if (match$9[0] === "-0" && match$9[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$10 = Parser.run(Json_helpers.integer, "-10002345");
        if (match$10.TAG !== /* Ok */0) {
          return Ava.fail(t, "Should not be an error", undefined);
        }
        var match$11 = match$10._0;
        var res = match$11[0];
        if (res === "-10002345" && match$11[1] === "") {
          return Ava.pass(t, undefined, undefined);
        }
        return Ava.fail(t, "Should not be okay of \"" + res + "\" with \"" + match$11[1] + "\" remaining", undefined);
      }));

Ava.test("Integer partially succeeds", (function (t) {
        var match = Parser.run(Json_helpers.integer, "1ert");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "1" && match$1[1] === "ert") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.integer, "-1  1");
        if (match$2.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$3 = match$2._0;
        if (match$3[0] === "-1" && match$3[1] === "  1") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Integer fails", (function (t) {
        var match = Parser.run(Json_helpers.integer, "  +");
        if (match.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$1 = Parser.run(Json_helpers.integer, "  1");
        if (match$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.integer, "  h1-");
        if (match$2.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Unescaped char succeeds", (function (t) {
        var match = Parser.run(Json_helpers.unescapedChar, "a");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "a" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$2 = Parser.run(Json_helpers.unescapedChar, "b");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === "b" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$4 = Parser.run(Json_helpers.unescapedChar, "c");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          if (match$5[0] === "c" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$6 = Parser.run(Json_helpers.unescapedChar, "d");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          if (match$7[0] === "d" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$8 = Parser.run(Json_helpers.unescapedChar, "9");
        if (match$8.TAG === /* Ok */0) {
          var match$9 = match$8._0;
          if (match$9[0] === "9" && match$9[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$10 = Parser.run(Json_helpers.unescapedChar, "-");
        if (match$10.TAG === /* Ok */0) {
          var match$11 = match$10._0;
          if (match$11[0] === "-" && match$11[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$12 = Parser.run(Json_helpers.unescapedChar, " ");
        if (match$12.TAG !== /* Ok */0) {
          return Ava.fail(t, "Should not fail", undefined);
        }
        var match$13 = match$12._0;
        if (match$13[0] === " " && match$13[1] === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Unescaped char partially succeeds", (function (t) {
        var match = Parser.run(Json_helpers.unescapedChar, "a\"");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "a" && match$1[1] === "\"") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$2 = Parser.run(Json_helpers.unescapedChar, "a\\");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === "a" && match$3[1] === "\\") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$4 = Parser.run(Json_helpers.unescapedChar, "a\\\"");
        if (match$4.TAG !== /* Ok */0) {
          return Ava.fail(t, "Should not fail", undefined);
        }
        var match$5 = match$4._0;
        if (match$5[0] === "a" && match$5[1] === "\\\"") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Unescaped char fails", (function (t) {
        var match = Parser.run(Json_helpers.unescapedChar, "\"");
        if (match.TAG === /* Ok */0) {
          Ava.fail(t, "Should not parse escaped char", undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$1 = Parser.run(Json_helpers.unescapedChar, "\\");
        if (match$1.TAG === /* Ok */0) {
          return Ava.fail(t, "Should not parse escaped char", undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

Ava.test("Escaped char succeeds", (function (t) {
        var match = Parser.run(Json_helpers.escapedChar, "\\\"");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "\"" && match$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.escapedChar, "\\");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === "\\" && match$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.escapedChar, "\\/");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit = 0;
          if (match$5[0] === "/" && match$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not succeed with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$6 = Parser.run(Json_helpers.escapedChar, "\b");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          if (match$7[0] === "\b" && match$7[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$8 = Parser.run(Json_helpers.escapedChar, "\n");
        if (match$8.TAG === /* Ok */0) {
          var match$9 = match$8._0;
          if (match$9[0] === "\n" && match$9[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$10 = Parser.run(Json_helpers.escapedChar, "\r");
        if (match$10.TAG === /* Ok */0) {
          var match$11 = match$10._0;
          if (match$11[0] === "\r" && match$11[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$12 = Parser.run(Json_helpers.escapedChar, "\t");
        if (match$12.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$13 = match$12._0;
        if (match$13[0] === "\t" && match$13[1] === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Escaped char partially succeeds", (function (t) {
        var match = Parser.run(Json_helpers.escapedChar, "\\\"  ");
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          if (match$1[0] === "\"" && match$1[1] === "  ") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.escapedChar, "\\hello");
        if (match$2.TAG === /* Ok */0) {
          var match$3 = match$2._0;
          if (match$3[0] === "\\" && match$3[1] === "hello") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$4 = Parser.run(Json_helpers.escapedChar, "\\/\\/");
        if (match$4.TAG === /* Ok */0) {
          var match$5 = match$4._0;
          var exit = 0;
          if (match$5[0] === "/" && match$5[1] === "\\/") {
            Ava.pass(t, undefined, undefined);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Ava.fail(t, "Should not succeed with \"" + match$5[1] + "\" remaining", undefined);
          }
          
        } else {
          Ava.fail(t, "Should not fail", undefined);
        }
        var match$6 = Parser.run(Json_helpers.escapedChar, "\b-1234gfd");
        if (match$6.TAG === /* Ok */0) {
          var match$7 = match$6._0;
          if (match$7[0] === "\b" && match$7[1] === "-1234gfd") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$8 = Parser.run(Json_helpers.escapedChar, "\n l ll ll \n");
        if (match$8.TAG === /* Ok */0) {
          var match$9 = match$8._0;
          if (match$9[0] === "\n" && match$9[1] === " l ll ll \n") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$10 = Parser.run(Json_helpers.escapedChar, "\r\n");
        if (match$10.TAG === /* Ok */0) {
          var match$11 = match$10._0;
          if (match$11[0] === "\r" && match$11[1] === "\n") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, undefined, undefined);
          }
        } else {
          Ava.fail(t, undefined, undefined);
        }
        var match$12 = Parser.run(Json_helpers.escapedChar, "\t\\lll");
        if (match$12.TAG !== /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        }
        var match$13 = match$12._0;
        if (match$13[0] === "\t" && match$13[1] === "\\lll") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Escaped char fails", (function (t) {
        var match = Parser.run(Json_helpers.escapedChar, " \"");
        if (match.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$1 = Parser.run(Json_helpers.escapedChar, " \\\"");
        if (match$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, undefined, undefined);
        }
        var match$2 = Parser.run(Json_helpers.escapedChar, "asfds\t");
        if (match$2.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, undefined, undefined);
        }
      }));

function run(param) {
  return Parser.run(Json_helpers.unicodeChar, param);
}

Ava.test("Unicode char succeeds", (function (t) {
        var x = Parser.run(Json_helpers.unicodeChar, "\\u0041");
        if (x.TAG === /* Ok */0) {
          var x$1 = x._0;
          if (x$1[0] === "A" && x$1[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$1), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$2 = Parser.run(Json_helpers.unicodeChar, "\\u0031");
        if (x$2.TAG === /* Ok */0) {
          var x$3 = x$2._0;
          if (x$3[0] === "1" && x$3[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$3), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$4 = Parser.run(Json_helpers.unicodeChar, "\\u0028");
        if (x$4.TAG === /* Ok */0) {
          var x$5 = x$4._0;
          if (x$5[0] === "(" && x$5[1] === "") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$5), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$6 = Parser.run(Json_helpers.unicodeChar, "\\u0101");
        if (x$6.TAG !== /* Ok */0) {
          return Ava.fail(t, shouldNotFail, undefined);
        }
        var x$7 = x$6._0;
        if (x$7[1] === "" && x$7[0] === String.fromCharCode(257)) {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, shouldNotPass(x$7), undefined);
        }
      }));

Ava.test("Unicode char partially succeeds", (function (t) {
        var x = Parser.run(Json_helpers.unicodeChar, "\\u0041asdf");
        if (x.TAG === /* Ok */0) {
          var x$1 = x._0;
          if (x$1[0] === "A" && x$1[1] === "asdf") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$1), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$2 = Parser.run(Json_helpers.unicodeChar, "\\u0041asdf");
        if (x$2.TAG === /* Ok */0) {
          var x$3 = x$2._0;
          if (x$3[0] === "A" && x$3[1] === "asdf") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$3), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$4 = Parser.run(Json_helpers.unicodeChar, "\\u0031999");
        if (x$4.TAG === /* Ok */0) {
          var x$5 = x$4._0;
          if (x$5[0] === "1" && x$5[1] === "999") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$5), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$6 = Parser.run(Json_helpers.unicodeChar, "\\u0028   lol");
        if (x$6.TAG === /* Ok */0) {
          var x$7 = x$6._0;
          if (x$7[0] === "(" && x$7[1] === "   lol") {
            Ava.pass(t, undefined, undefined);
          } else {
            Ava.fail(t, shouldNotPass(x$7), undefined);
          }
        } else {
          Ava.fail(t, shouldNotFail, undefined);
        }
        var x$8 = Parser.run(Json_helpers.unicodeChar, "\\u0101\\u0101");
        if (x$8.TAG !== /* Ok */0) {
          return Ava.fail(t, shouldNotFail, undefined);
        }
        var x$9 = x$8._0;
        if (x$9[1] === "\\u0101" && x$9[0] === String.fromCharCode(257)) {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, shouldNotPass(x$9), undefined);
        }
      }));

Ava.test("Unicode char fails", (function (t) {
        var x = Parser.run(Json_helpers.unicodeChar, "  \\u0041asdf");
        if (x.TAG === /* Ok */0) {
          Ava.fail(t, shouldNotPass(x._0), undefined);
        } else {
          Ava.pass(t, shouldNotFail, undefined);
        }
        var x$1 = Parser.run(Json_helpers.unicodeChar, "\\\\u0031999");
        if (x$1.TAG === /* Ok */0) {
          Ava.fail(t, shouldNotPass(x$1._0), undefined);
        } else {
          Ava.pass(t, shouldNotFail, undefined);
        }
        var x$2 = Parser.run(Json_helpers.unicodeChar, "l\\u0028   lol");
        if (x$2.TAG === /* Ok */0) {
          Ava.fail(t, shouldNotPass(x$2._0), undefined);
        } else {
          Ava.pass(t, shouldNotFail, undefined);
        }
        var x$3 = Parser.run(Json_helpers.unicodeChar, "/\\u0101\\u0101");
        if (x$3.TAG === /* Ok */0) {
          return Ava.fail(t, shouldNotPass(x$3._0), undefined);
        } else {
          return Ava.pass(t, shouldNotFail, undefined);
        }
      }));

var P;

var Helpers;

exports.P = P;
exports.Helpers = Helpers;
exports.shouldNotPass = shouldNotPass;
exports.shouldNotFail = shouldNotFail;
exports.run = run;
/*  Not a pure module */
