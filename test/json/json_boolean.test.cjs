// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Parser = require("../../src/parser.cjs");
var Json_parser = require("./json_parser.cjs");

Ava.test("[JSON] valid true", (function (t) {
        var result = Parser.run(Json_parser.true_, "true");
        if (result.TAG !== /* Ok */0) {
          return Ava.fail(t, "Parsing \"true\" returns an error of message: \"" + result._0 + "\"", undefined);
        }
        var match = result._0;
        var ast = match[0];
        if (ast !== 1) {
          return Ava.fail(t, "Parsing \"true\" returns an incorrect AST of " + Json_parser.toString(ast), undefined);
        }
        var remaining = match[1];
        if (remaining === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, "Parsing \"true\" should return an empty string but got \"" + remaining + "\"", undefined);
        }
      }));

Ava.test("[JSON] invalid true", (function (t) {
        var result = Parser.run(Json_parser.true_, "ttrue");
        if (result.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, "Parsing \"true_\" should return an error message", undefined);
        }
        var result$1 = Parser.run(Json_parser.true_, "false");
        if (result$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, "Parsing \"true_\" should return an error message", undefined);
        }
        var result$2 = Parser.run(Json_parser.true_, "{}}");
        if (result$2.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, "Parsing \"true_\" should return an error message", undefined);
        }
      }));

Ava.test("[JSON] valid false", (function (t) {
        var result = Parser.run(Json_parser.false_, "false");
        if (result.TAG !== /* Ok */0) {
          return Ava.fail(t, "Parsing \"false\" returns an error of message: \"" + result._0 + "\"", undefined);
        }
        var match = result._0;
        var ast = match[0];
        if (ast < 2) {
          return Ava.fail(t, "Parsing \"false\" returns an incorrect AST of " + Json_parser.toString(ast), undefined);
        }
        var remaining = match[1];
        if (remaining === "") {
          return Ava.pass(t, undefined, undefined);
        } else {
          return Ava.fail(t, "Parsing \"false\" should return an empty string but got \"" + remaining + "\"", undefined);
        }
      }));

Ava.test("[JSON] invalid false", (function (t) {
        var result = Parser.run(Json_parser.false_, "tfalse");
        if (result.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, "Parsing \"false_\" should return an error message", undefined);
        }
        var result$1 = Parser.run(Json_parser.false_, " true");
        if (result$1.TAG === /* Ok */0) {
          Ava.fail(t, undefined, undefined);
        } else {
          Ava.pass(t, "Parsing \"false_\" should return an error message", undefined);
        }
        var result$2 = Parser.run(Json_parser.false_, "{}}");
        if (result$2.TAG === /* Ok */0) {
          return Ava.fail(t, undefined, undefined);
        } else {
          return Ava.pass(t, "Parsing \"false_\" should return an error message", undefined);
        }
      }));

var P;

var true_ = Json_parser.true_;

var false_ = Json_parser.false_;

exports.P = P;
exports.true_ = true_;
exports.false_ = false_;
/*  Not a pure module */
