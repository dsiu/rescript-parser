// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Parser = require("../../src/parser.cjs");
var Json_helpers = require("./json_helpers.cjs");

function toString(t) {
  if (typeof t === "number") {
    switch (t) {
      case /* Null */0 :
          return "Null";
      case /* True */1 :
          return "True";
      case /* False */2 :
          return "False";
      
    }
  } else {
    switch (t.TAG | 0) {
      case /* Object */0 :
          return "Object()";
      case /* Number */1 :
          return "Number(" + t._0 + ")";
      case /* String */2 :
          return "String(" + t._0 + ")";
      case /* Array */3 :
          var stringify = function (xs) {
            if (xs) {
              return toString(xs.hd) + stringify(xs.tl);
            } else {
              return "";
            }
          };
          return "[" + stringify(t._0) + "]";
      
    }
  }
}

function _charToString(c) {
  return String.fromCharCode(c);
}

function $$null(param) {
  return /* Null */0;
}

function true_(param) {
  return /* True */1;
}

function false_(param) {
  return /* False */2;
}

function number(number$1) {
  return {
          TAG: /* Number */1,
          _0: number$1
        };
}

function string(string$1) {
  return {
          TAG: /* String */2,
          _0: string$1
        };
}

function array(xs) {
  return {
          TAG: /* Array */3,
          _0: xs
        };
}

function object(xs) {
  return {
          TAG: /* Object */0,
          _0: xs
        };
}

var json = Parser.makeRecursive(function (p) {
      var comma = Parser.$$char(/* ',' */44);
      var betweenBraces = function (__x) {
        return Parser.between(__x, Parser.$$char(/* '[' */91), Parser.$$char(/* ']' */93));
      };
      var empty = Parser.map(betweenBraces(Json_helpers.manyWhitespace), (function (param) {
              return /* [] */0;
            }));
      var nonEmpty = betweenBraces(Parser.separatedBy1(p, comma));
      var arrayElements = Parser.choice([
            empty,
            nonEmpty
          ]);
      var betweenCurlyBraces = function (__x) {
        return Parser.between(__x, Parser.$$char(/* '{' */123), Parser.$$char(/* '}' */125));
      };
      var keyValuePair = Parser.andThen(Parser.keepLeft(Parser.between(Json_helpers.string, Json_helpers.manyWhitespace, Json_helpers.manyWhitespace), Parser.$$char(/* ':' */58)), p);
      var nonEmpty$1 = betweenCurlyBraces(Parser.separatedBy1(keyValuePair, comma));
      var empty$1 = Parser.map(betweenCurlyBraces(Json_helpers.manyWhitespace), (function (param) {
              return /* [] */0;
            }));
      var objectPairs = Parser.choice([
            empty$1,
            nonEmpty$1
          ]);
      return Parser.between(Parser.choice([
                      Parser.map(Parser.string("null"), $$null),
                      Parser.map(Parser.string("true"), true_),
                      Parser.map(Parser.string("false"), false_),
                      Parser.map(objectPairs, object),
                      Parser.map(arrayElements, array),
                      Parser.map(Json_helpers.number, number),
                      Parser.map(Json_helpers.string, string)
                    ]), Json_helpers.manyWhitespace, Json_helpers.manyWhitespace);
    });

var P;

var Helpers;

exports.toString = toString;
exports.P = P;
exports.Helpers = Helpers;
exports._charToString = _charToString;
exports.$$null = $$null;
exports.true_ = true_;
exports.false_ = false_;
exports.number = number;
exports.string = string;
exports.array = array;
exports.object = object;
exports.json = json;
/* json Not a pure module */
