// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Parser = require("../../../src/parser.cjs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function $$null(param) {
  return /* Null */0;
}

function true_(param) {
  return /* True */1;
}

function false_(param) {
  return /* False */2;
}

function number(number$1) {
  return {
          TAG: /* Number */1,
          _0: number$1
        };
}

function string(string$1) {
  return {
          TAG: /* String */2,
          _0: string$1
        };
}

function array(xs) {
  return {
          TAG: /* Array */3,
          _0: xs
        };
}

function object(xs) {
  return {
          TAG: /* Object */0,
          _0: xs
        };
}

function toString(t) {
  if (typeof t === "number") {
    switch (t) {
      case /* Null */0 :
          return "Null";
      case /* True */1 :
          return "True";
      case /* False */2 :
          return "False";
      
    }
  } else {
    switch (t.TAG | 0) {
      case /* Object */0 :
          return "Object()";
      case /* Number */1 :
          return "Number(" + t._0 + ")";
      case /* String */2 :
          return "String(" + t._0 + ")";
      case /* Array */3 :
          var stringify = function (xs) {
            if (xs) {
              return toString(xs.hd) + stringify(xs.tl);
            } else {
              return "";
            }
          };
          return "[" + stringify(t._0) + "]";
      
    }
  }
}

function charToString(c) {
  return String.fromCharCode(c);
}

function concatStringList(chars) {
  if (chars) {
    return chars.hd + concatStringList(chars.tl);
  } else {
    return "";
  }
}

function stringifyCharList(chars) {
  return concatStringList(Belt_List.map(chars, charToString));
}

var zero = Parser.$$char(/* '0' */48);

var oneThroughNine = Parser.satisfy(function (c) {
      if (c >= /* '1' */49) {
        return /* '9' */57 >= c;
      } else {
        return false;
      }
    });

var digit = Parser.map(Parser.orElse(zero, oneThroughNine), charToString);

var digits = Parser.map(Parser.atLeastOne(digit), concatStringList);

var sign = Parser.anyOf([
      /* '+' */43,
      /* '-' */45
    ]);

var fraction = Parser.map(Parser.andThen(Parser.$$char(/* '.' */46), digits), (function (param) {
        return String.fromCharCode(param[0]) + param[1];
      }));

var exponent = Parser.map(Parser.andThen(Parser.andThen(Parser.orElse(Parser.$$char(/* 'e' */101), Parser.$$char(/* 'E' */69)), Parser.optional(sign)), digits), (function (param) {
        var match = param[0];
        return String.fromCharCode(match[0]) + Belt_Option.getWithDefault(Belt_Option.map(match[1], charToString), "") + param[1];
      }));

function toString$1(param) {
  return String.fromCharCode(param[0]) + param[1];
}

var oneThroughNineThenDigits = Parser.map(Parser.andThen(oneThroughNine, digits), toString$1);

var signThenDigit = Parser.map(Parser.andThen(Parser.$$char(/* '-' */45), digit), toString$1);

var signThenOneThroughNineThenDigits = Parser.map(Parser.andThen(Parser.andThen(Parser.$$char(/* '-' */45), oneThroughNine), digits), (function (param) {
        var match = param[0];
        return String.fromCharCode(match[0]) + String.fromCharCode(match[1]) + param[1];
      }));

var integer = Parser.choice([
      oneThroughNineThenDigits,
      digit,
      signThenOneThroughNineThenDigits,
      signThenDigit
    ]);

var fraction$1 = Parser.optional(fraction);

var exponent$1 = Parser.optional(exponent);

var jsonNumber = Parser.map(Parser.andThen(Parser.andThen(integer, fraction$1), exponent$1), (function (param) {
        var match = param[0];
        return match[0] + Belt_Option.getWithDefault(match[1], "") + Belt_Option.getWithDefault(param[1], "");
      }));

var doubleQuote = Parser.$$char(/* '"' */34);

var unescapedChar = Parser.map(Parser.map(Parser.satisfy(function (ch) {
              if (ch > 34 || ch < 8) {
                return ch !== 92;
              } else {
                return !(ch > 33 || ch < 14);
              }
            }), (function (prim) {
            return prim;
          })), (function (prim) {
        return String.fromCharCode(prim);
      }));

var escapedChar = Parser.choice(Belt_Array.map([
          [
            "\\\"",
            /* '"' */34
          ],
          [
            "\\\\",
            /* '\\' */92
          ],
          [
            "\\/",
            /* '/' */47
          ],
          [
            "\\b",
            /* '\b' */8
          ],
          [
            "\\n",
            /* '\n' */10
          ],
          [
            "\\r",
            /* '\r' */13
          ],
          [
            "\\t",
            /* '\t' */9
          ]
        ], (function (param) {
            var result = param[1];
            return Parser.map(Parser.string(param[0]), (function (param) {
                          return String.fromCharCode(result);
                        }));
          })));

var backslash = Parser.$$char(/* '\\' */92);

var uChar = Parser.$$char(/* 'u' */117);

var hexdigit = Parser.satisfy(function (c) {
      if (c > 70 || c < 48) {
        return !(c > 102 || c < 97);
      } else {
        return c > 64 || c < 58;
      }
    });

var fourHexDigits = Parser.andThen(Parser.andThen(Parser.andThen(hexdigit, hexdigit), hexdigit), hexdigit);

var unicodeChar = Parser.map(Parser.keepRight(Parser.keepRight(backslash, uChar), fourHexDigits), (function (param) {
        var match = param[0];
        var match$1 = match[0];
        return String.fromCharCode(parseInt(String.fromCharCode(match$1[0], match$1[1], match[1], param[1]), 16));
      }));

var jsChar = Parser.orElse(Parser.orElse(unescapedChar, escapedChar), unicodeChar);

var jsonString = Parser.map(Parser.between(Parser.many(jsChar), doubleQuote, doubleQuote), concatStringList);

var manyWhitespace = Parser.many(Parser.anyOf([
          /* ' ' */32,
          /* '\n' */10,
          /* '\t' */9,
          /* '\r' */13
        ]));

function _charToString(c) {
  return String.fromCharCode(c);
}

var parse = Parser.makeRecursive(function (p) {
      var comma = Parser.$$char(/* ',' */44);
      var betweenBraces = function (__x) {
        return Parser.between(__x, Parser.$$char(/* '[' */91), Parser.$$char(/* ']' */93));
      };
      var empty = Parser.map(betweenBraces(manyWhitespace), (function (param) {
              return /* [] */0;
            }));
      var nonEmpty = betweenBraces(Parser.separatedBy1(p, comma));
      var jsonArray = Parser.choice([
            empty,
            nonEmpty
          ]);
      var betweenCurlyBraces = function (__x) {
        return Parser.between(__x, Parser.$$char(/* '{' */123), Parser.$$char(/* '}' */125));
      };
      var keyValuePair = Parser.andThen(Parser.keepLeft(Parser.between(jsonString, manyWhitespace, manyWhitespace), Parser.$$char(/* ':' */58)), p);
      var nonEmpty$1 = betweenCurlyBraces(Parser.separatedBy1(keyValuePair, comma));
      var empty$1 = Parser.map(betweenCurlyBraces(manyWhitespace), (function (param) {
              return /* [] */0;
            }));
      var jsonObject = Parser.choice([
            empty$1,
            nonEmpty$1
          ]);
      return Parser.between(Parser.choice([
                      Parser.map(Parser.string("null"), $$null),
                      Parser.map(Parser.string("true"), true_),
                      Parser.map(Parser.string("false"), false_),
                      Parser.map(jsonObject, object),
                      Parser.map(jsonArray, array),
                      Parser.map(jsonNumber, number),
                      Parser.map(jsonString, string)
                    ]), manyWhitespace, manyWhitespace);
    });

var $$Option;

var P;

exports.$$null = $$null;
exports.true_ = true_;
exports.false_ = false_;
exports.number = number;
exports.string = string;
exports.array = array;
exports.object = object;
exports.toString = toString;
exports.$$Option = $$Option;
exports.P = P;
exports.charToString = charToString;
exports.concatStringList = concatStringList;
exports.stringifyCharList = stringifyCharList;
exports.zero = zero;
exports.oneThroughNine = oneThroughNine;
exports.digit = digit;
exports.digits = digits;
exports.sign = sign;
exports.fraction = fraction;
exports.exponent = exponent;
exports.integer = integer;
exports.jsonNumber = jsonNumber;
exports.doubleQuote = doubleQuote;
exports.unescapedChar = unescapedChar;
exports.escapedChar = escapedChar;
exports.unicodeChar = unicodeChar;
exports.jsonString = jsonString;
exports.manyWhitespace = manyWhitespace;
exports._charToString = _charToString;
exports.parse = parse;
/* zero Not a pure module */
