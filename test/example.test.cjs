// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Char = require("rescript/lib/js/char.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Res_parser = require("../src/res_parser.cjs");
var Caml_format = require("rescript/lib/js/caml_format.js");

var sign = Res_parser.choice([
      Res_parser.map(Res_parser.$$char(/* '+' */43), (function (param) {
              return /* Plus */0;
            })),
      Res_parser.map(Res_parser.$$char(/* '-' */45), (function (param) {
              return /* Subtract */1;
            })),
      Res_parser.map(Res_parser.$$char(/* 'x' */120), (function (param) {
              return /* Multiply */2;
            }))
    ]);

var manyWhitespace = Res_parser.many(Res_parser.$$char(/* ' ' */32));

var singleDigit = Res_parser.between(Res_parser.map(Res_parser.map(Res_parser.map(Res_parser.satisfy(function ($$char) {
                      if ($$char >= /* '0' */48) {
                        return $$char <= /* '9' */57;
                      } else {
                        return false;
                      }
                    }), Char.escaped), Caml_format.caml_int_of_string), (function (x) {
            return /* SingleDigit */{
                    _0: x
                  };
          })), manyWhitespace, manyWhitespace);

var parser = Res_parser.map(Res_parser.andThen(Res_parser.andThen(singleDigit, sign), singleDigit), (function (param) {
        var match = param[0];
        return /* Expression */{
                _0: match[0],
                _1: match[1],
                _2: param[1]
              };
      }));

var result = Res_parser.run(parser, " 1 +  4  ");

Ava.test("Example.test", (function (t) {
        return Ava.true_(t, Caml_obj.caml_equal(result, {
                        TAG: /* Ok */0,
                        _0: [
                          /* Expression */{
                            _0: /* SingleDigit */{
                              _0: 1
                            },
                            _1: /* Plus */0,
                            _2: /* SingleDigit */{
                              _0: 4
                            }
                          },
                          ""
                        ]
                      }), undefined, undefined);
      }));

var P;

exports.P = P;
exports.sign = sign;
exports.manyWhitespace = manyWhitespace;
exports.singleDigit = singleDigit;
exports.parser = parser;
exports.result = result;
/* sign Not a pure module */
